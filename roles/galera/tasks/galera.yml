---
- name: galera iptable rules
  iptables:
    port: "{{ item.port }}"
    protocol: "{{ item.protocol}}"
    comment: "{{item.comment}}"
  with_items:
    - { port: 3306, protocol: tcp, comment: "mariadb sql incomming 3306" }
    - { port: 873, protocol: tcp, comment: "rsync replication traffic" }
  tags:
    - iptables
    - mysql

- name: install galera db packages
  yum: pkg=mariadb-galera-server state=present
  tags: mysql

- name: install auxiliary database packages
  yum: pkg={{ item }} state=present
  with_items:
    - MySQL-python
    - xinetd
    - nfs-utils
    - rsync
  tags: mysql

- name: fix permissions for mysql
  file: path=/var/lib/mysql mode=0777 owner=mysql group=mysql state=directory recurse=yes
  tags:  mysql

- name: set bind host for galera
  ini_file:
    dest: /etc/my.cnf.d/galera.cnf
    section: mysqld
    option: bind-address
    value: "{{ mysql_bind_address }}"
  tags: mysql

- name: start mariadb service
  service: name=mysqld state=restarted
  tags: mysql

- name: create clustercheck database user
  command: mysql -e "CREATE USER 'clustercheck'@'localhost' IDENTIFIED BY '{{clustercheck_db_pass}}';"
  tags: mysql
  ignore_errors: yes

- name: deploy clustercheck
  template: src=clustercheck.j2 dest=/etc/sysconfig/clustercheck mode=0644 owner=root group=root
  tags: mysql

- name: deploy mariadb server config file with increased number of max_connections
  copy: src=server.cnf dest=/etc/my.cnf.d/server.cnf mode=0644 owner=root group=root
  tags: mysql

- name: deploy galera.cnf on controllers
  template: src=galera.cnf.j2 dest=/etc/my.cnf.d/galera.cnf mode=0644 owner=root group=root
  tags: mysql

- name: deploy galera-monitor config file
  copy: src=galera-monitor dest=/etc/xinetd.d/galera-monitor mode=0600 owner=root group=root
  tags: mysql

- name: enable xinetd service
  service: name=xinetd enabled=yes state=started
  tags: mysql

- name: disable mariadb service
  service: name=mariadb enabled=no state=stopped
  tags: mysql


- name: create pacemaker resource for galera
  shell: "pcs resource --full | grep 'Resource: {{ item.id }}' || pcs resource {{ item.cmd }}"
  with_items:
    - { id: "galera", cmd: "create galera galera enable_creation=true wsrep_cluster_address='gcomm://{{ wsrep_cluster_address }}' additional_parameters='--open-files-limit=16384' meta master-max=3 ordered=true op promote timeout=300s on-fail=block --master" }
  run_once: true
  register: cmd
  changed_when: "'Resource: {{ item.id }}' not in cmd.stdout"
  tags: mysql

- name: Wait until clustercheck returns 0
  command: clustercheck
  register: result
  until: result.rc == 0
  retries: 60
  delay: 5
  tags: mysql

- name: create databases
  mysql_db: name={{ item }} state=present
  with_items:
    - keystone
    - glance
    - cinder
    - nova
    - neutron
    - heat
  delay: 2
  run_once: true
  tags: mysql

- name: create keystone database users
  mysql_user: name={{ item.name }} host=% password={{ item.password }} priv={{ item.db }}.*:{{ item.priv }} state=present
  with_items:
    - { name: root, password: "{{ db_root_password }}", db: '*', priv: 'ALL,GRANT' }
    - { name: keystone, password: "{{ keystone_db_pass }}", db: keystone, priv: ALL }
    - { name: glance, password: "{{ glance_db_pass }}", db: glance, priv: ALL }
    - { name: cinder, password: "{{ cinder_db_pass }}", db: cinder, priv: ALL }
    - { name: nova, password: "{{ nova_db_pass }}", db: nova, priv: ALL }
    - { name: neutron, password: "{{ neutron_db_pass }}", db: neutron, priv: ALL }
    - { name: heat, password: "{{ heat_db_pass }}", db: heat, priv: ALL }
  run_once: true
  tags: mysql

- name : wait for DB to create users
  pause: seconds=30
  tags: mysql

- name: flush db hosts
  command: mysqladmin flush-hosts
  run_once: true
  tags: mysql
