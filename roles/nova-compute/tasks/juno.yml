---
- name: iptable rules for nova-compute nodes
  iptables:
    port: "{{item.port}}"
    protocol: "{{item.protocol}}"
    comment: "{{item.comment}}"
  with_items:
    - { port: ["5900:5999"], protocol: tcp, comment: "vnc incoming" }
    - { port: 4789, protocol: tcp, comment: "neutron tunnel" }
    - { port: 4789, protocol: udp, comment: "neutron tunnels"}
    - { port: ["16509", "49152:49215"], protocol: tcp, comment: "nova qemu incoming" }
  tags:
    - nova
    - iptables

- name: install nova compute packages
  yum:
    pkg: "{{ item }}"
    state: present
  with_items:
    - openstack-nova-compute
    - openstack-utils
    - python-cinder
    - openstack-ceilometer-compute
    - nfs-utils
    - libvirt
  tags: nova

- name: install ceph package
  yum:
    name: ceph-common
    state: present
  when: use_ceph
  tags: nova

- name: enable nfs support services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - rpcbind
    - nfslock
  when: use_cinder_nfs_volume_driver or use_nova_nfs_backend
  tags: nova

- name: enable nfs-idmap
  service:
    name: nfs-idmap
    state: started
    enabled: yes
  when: use_cinder_nfs_volume_driver or use_nova_nfs_backend
  tags: nova

- name: configure shared storage for nova instances
  lineinfile: >
    dest=/etc/fstab state=present
    regexp="/var/lib/nova/instances"
    line="{{ nova_shared_volume }} /var/lib/nova/instances {{ nova_shared_fs_type }} {{ nova_shared_fs_mount_options }} 0 0"
  when: use_nova_shared_backend
  tags: nova

- name: modify libvirtd parameters
  ini_file:
    dest: /etc/sysconfig/libvirtd
    section: ""
    option: 'LIBVERTD_ARGS'
    value: '"--listen"'
  when: nova_instance_live_migration
  tags: nova

- name: modify libvirtd.conf parameters
  ini_file:
    dest: /etc/libvirt/libvirtd.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "", option: "listen_tls", value: "0"}
    - { section: "", option: "auth_tcp", value: "none"}
    - { section: "", option: "listen_tcp", value: "1"}
  when: nova_instance_live_migration
  tags: nova

- name: restart and enable libvirtd
  service: name=libvirtd state=restarted enabled=yes
  tags: nova

- name: install nova-network
  yum: pkg=openstack-nova-network state=present
  when: use_nova_network
  tags: nova

- name: install neutron network node
  yum: pkg={{ item }} state=present
  with_items:
    - openvswitch
    - openstack-neutron-openvswitch
    - openstack-neutron
  when: use_neutron
  tags: nova

- name: start openvswitch
  service: name=openvswitch enabled=yes state=started
  when: use_neutron
  tags: nova

- name: create integration bridge
  openvswitch_bridge: bridge=br-int state=present
  when: use_neutron
  tags: nova

- name: create tunneling bridge
  openvswitch_bridge: bridge=br-tun state=present
  when: neutron_ovs_tunnel_type is defined
  tags: nova

- name: create ovs bridges
  openvswitch_bridge: bridge={{ item.bridge }} state=present
  with_items: "{{neutron_ovs_bridges}}"
  when: neutron_ovs_bridges is defined
  tags: nova

- name: configure ovs ports
  openvswitch_port: bridge={{ item.bridge }} port={{ item.port }} state=present
  with_items: "{{neutron_ovs_bridges}}"
  when: neutron_ovs_bridges is defined
  tags: nova

- name: Update neutron.conf file
  ini_file:
    dest: /etc/neutron/neutron.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "auth_strategy", value: "keystone"}
    - { section: "DEFAULT", option: "rabbit_hosts", value: "{{ rabbit_hosts }}"}
    - { section: "DEFAULT", option: "rabbit_ha_queues", value: "true"}
    - { section: "DEFAULT", option: "rabbit_userid", value: "guest"}
    - { section: "DEFAULT", option: "rabbit_password", value: "guest"}
    - { section: "DEFAULT", option: "notification_driver", value: "neutron.openstack.common.notifier.rpc_notifier"}
    - { section: "keystone_authtoken", option: "auth_host", value: "{{ keystone_admin_vip | default ('127.0.0.1') }}"}
    - { section: "keystone_authtoken", option: "auth_port", value: "{{ keystone_auth_port | default (35357) }}"}
    - { section: "keystone_authtoken", option: "auth_protocol", value: "{{ keystone_auth_protocol | default ('http') }}"}
    - { section: "keystone_authtoken", option: "admin_tenant_name", value: "services"}
    - { section: "keystone_authtoken", option: "admin_user", value: "neutron"}
    - { section: "keystone_authtoken", option: "admin_password", value: "{{ neutron_pass }}"}
  tags: nova

- name: Update ovs_neutron_plugin.ini file
  ini_file:
    dest: /etc/neutron//plugins/openvswitch/ovs_neutron_plugin.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "agent", option: "tunnel_types", value: "{{ neutron_ovs_tunnel_type }}"}
    - { section: "agent", option: "veth_mtu", value: "{{mtu | default (1500)}}"}
    - { section: "agent", option: "vxlan_udp_port", value: "{{ neutron_vxlan_udp_port }}"}
    - { section: "agent", option: "l2_population", value: "False"}
    - { section: "ovs", option: "enable_tunneling", value: "True"}
    - { section: "ovs", option: "tunnel_id_ranges", value: "{{ neutron_ovs_tunnel_id_ranges }}"}
    - { section: "ovs", option: "tenant_network_type", value: "{{ neutron_ovs_tenant_network_type }}"}
    - { section: "ovs", option: "integration_bridge", value: "{{ neutron_ovs_integration_bridge }}"}
    - { section: "ovs", option: "tunnel_bridge", value: "{{ neutron_ovs_tunnel_bridge }}"}
    - { section: "ovs", option: "local_ip", value: "{{ tunnel_ipaddr }}"}
    - { section: "securitygroup", option: "firewall_driver", value: "{{ neutron_ovs_firewall_driver }}"}
  tags: nova

- name: Update nova config file
  ini_file:
    dest: /etc/nova/nova.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "memcached_servers", value: "{{ memcached_servers }}"}
    - { section: "DEFAULT", option: "rabbit_hosts", value: "{{ rabbit_hosts }}"}
    - { section: "DEFAULT", option: "rabbit_ha_queues", value: "true"}
    - { section: "DEFAULT", option: "heat_metadata_server_url", value: "{{ heat_metadata_server_url }}"}
    - { section: "DEFAULT", option: "heat_waitcondition_server_url", value: "{{ heat_waitcondition_server_url }}"}
    - { section: "DEFAULT", option: "heat_watch_server_url", value: "{{ heat_watch_server_url }}"}
    - { section: "DEFAULT", option: "rpc_backend", value: "heat.openstack.common.rpc.impl_kombu"}
    - { section: "DEFAULT", option: "notification_driver", value: "heat.openstack.common.notifier.rpc_notifier"}
    - { section: "DEFAULT", option: "vif_plugging_is_fatal", value: "False"}
    - { section: "DEFAULT", option: "vif_plugging_timeout", value: "0"}
    - { section: "DEFAULT", option: "vncserver_proxyclient_address", value: "{{ internal_ipaddr }}"}
    - { section: "DEFAULT", option: "vncserver_listen", value: "0.0.0.0"}
    - { section: "DEFAULT", option: "novncproxy_base_url", value: "http://{{ vip_nova_pub }}:6080/vnc_auto.html"}
    - { section: "DEFAULT", option: "auth_startegy", value: "keystone"}
    - { section: "DEFAULT", option: "metadata_host", value: "{{ nova_vip }}"}
    - { section: "DEFAULT", option: "metadata_listen", value: "{{ internal_ipaddr }}"}
    - { section: "DEFAULT", option: "metadata_listen_port", value: "{{ nova_port| default(8775) }}"}
    - { section: "DEFAULT", option: "glance_host", value: "{{ glance_vip }}"}
    - { section: "DEFAULT", option: "glance_port", value: "{{ glance_port | default(9292) }}"}
    - { section: "DEFAULT", option: "network_api_class", value: "nova.network.neutronv2.api.API"}
    - { section: "DEFAULT", option: "neutron_url", value: "http://{{ neutron_vip | default('127.0.0.1') }}:{{ neutron_port | default(9696) }}/"}
    - { section: "DEFAULT", option: "neutron_admin_tenant_name", value: "services"}
    - { section: "DEFAULT", option: "neutron_admin_username", value: "neutron"}
    - { section: "DEFAULT", option: "neutron_admin_password", value: "{{ neutron_pass }}"}
    - { section: "DEFAULT", option: "neutron_admin_auth_url ", value: "http://{{ keystone_vip | default('127.0.0.1') }}:{{ keystone_private_port | default(5000) }}/v2.0"}
    - { section: "DEFAULT", option: "ovs_bridge", value: "br-int"}
    - { section: "DEFAULT", option: "firewall_driver", value: "nova.virt.firewall.NoopFirewallDriver"}
    - { section: "DEFAULT", option: "libvirt_vif_driver", value: "nova.virt.libvirt.vif.LibvirtGenericVIFDriver"}
    - { section: "DEFAULT", option: "security_group_api", value: "{{ nova_security_group_api }}"}
    - { section: "DEFAULT", option: "scheduler_host_subset_size", value: "30"}
    - { section: "DEFAULT", option: "instance_usage_audit", value: "True"}
    - { section: "DEFAULT", option: "instance_usage_audit_period", value: "hour"}
    - { section: "DEFAULT", option: "notify_on_state_change", value: "vm_and_task_state"}
    - { section: "DEFAULT", option: "notification_topics", value: "notifications"}
    - { section: "DEFAULT", option: "notification_driver", value: "nova.openstack.common.notifier.rpc_notifier"}
    - { section: "DEFAULT", option: "rpc_backend", value: "nova.openstack.common.rpc.impl_kombu"}
    - { section: "DEFAULT", option: "instance_usage_audit", value: "True"}
    - { section: "DEFAULT", option: "notify_on_state_change", value: "vm_and_task_state"}
    - { section: "neutron", option: "service_neutron_metadata_proxy", value: "True"}
    - { section: "neutron", option: "neutron_metadata_proxy_shared_secret", value: "{{ neutron_metadata_proxy_shared_secret }}"}
    - { section: "conductor", option: "use_local", value: "False"}
    - { section: "database", option: "connection", value: "mysql://nova:{{ nova_db_pass }}@{{ lb_db_vip }}/nova"}
    - { section: "database", option: "max_retries", value: "-1"}
  tags: nova

- name: Update ceilometer.conf file
  ini_file:
    dest: /etc/ceilometer/ceilometer.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "memcached_servers", value: "{{ memcached_servers }}"}
    - { section: "DEFAULT", option: "rabbit_hosts", value: "{{ rabbit_hosts }}"}
    - { section: "DEFAULT", option: "rabbit_ha_queues", value: "true"}
    - { section: "keystone_authtoken", option: "auth_host", value: "{{ keystone_admin_vip | default('127.0.0.1') }}"}
    - { section: "keystone_authtoken", option: "auth_port", value: "{{ keystone_auth_port | default(35357) }}"}
    - { section: "keystone_authtoken", option: "auth_protocol", value: "{{ keystone_auth_protocol | default('http') }}"}
    - { section: "keystone_authtoken", option: "auth_uri", value: "{{ keystone_auth_protocol | default('http') }}://{{ keystone_admin_vip }}:{{ keystone_auth_port | default (35357) }}/v2.0"}
    - { section: "keystone_authtoken", option: "admin_tenant_name", value: "services"}
    - { section: "keystone_authtoken", option: "admin_user", value: "ceilometer"}
    - { section: "keystone_authtoken", option: "admin_password", value: "{{ ceilometer_pass }}"}
    - { section: "database", option: "connection", value: "mongodb://{{ mongodb_servers }}/ceilometer?replicaSet=ceilometer"}
    - { section: "database", option: "max_retries", value: "-1"}
    - { section: "database", option: "time_to_live", value: "{{ ceilometer_time_to_live | default(44320) }}"}
    - { section: "service_credentials", option: "os_auth_url", value: "{{ keystone_auth_protocol | default('http') }}://{{ keystone_private_vip }}:{{ keystone_private_port | default (5000) }}/v2.0"}
    - { section: "service_credentials", option: "os_username", value: "ceilometer"}
    - { section: "service_credentials", option: "os_password", value: "{{ ceilometer_pass }}"}
    - { section: "service_credentials", option: "os_tenant_name", value: "services"}
    - { section: "publisher_rpc", option: "metering_secret", value: "{{ ceilometer_metering_secret }}"}
  tags: nova

- name: create a directory for cisco plugins
  file: dest=/etc/neutron/plugins/cisco mode=0755 owner=root group=root state=directory
  when: use_neutron_cisco
  tags: nova

- name: deploy neutron config file
  template: src={{ openstack_release }}/cisco_plugins.ini.j2
            dest=/etc/neutron/plugins/cisco/cisco_plugins.ini
            mode=0640 owner=root group=neutron
  when: use_neutron_cisco
  tags: nova

- name: restart neutron openvswitch agent
  service:
    name: neutron-openvswitch-agent
    state: restarted
  tags: nova

- name: create a directory for the cisco nexus ssh keys
  file: dest=/var/lib/neutron/.ssh mode=0700 owner=neutron group=neutron state=directory
  when: use_neutron_cisco
  tags: nova

- name: make cisco nexus switch ssh keys known
  copy: src=special/cisco_nexus.keys
        dest=/var/lib/neutron/.ssh/known_hosts
        mode=0644 owner=neutron group=neutron
  when: use_neutron_cisco
  tags: nova

- name: copy cinder ceph client keyring to nova-compute nodes
  copy: src=files/cinder/ceph.client.keyring
        dest=/etc/ceph/ceph.client.{{ cinder_rbd_user | default('cinder') }}.keyring
        mode=0600 owner=root group=root
  when: use_ceph
  tags: nova

- name: deploy nova secret.xml file to enable access to the ceph storage
  template: src={{ openstack_release }}/nova-secret.xml.j2 dest=/tmp/secret.xml
  when: use_ceph
  tags: nova

- name: set libvirt secret value
  shell: virsh secret-set-value --secret $(virsh secret-define --file /tmp/secret.xml | awk '{print $2}') --base64 $(awk '/key/ {print $3}' /etc/ceph/ceph.client.{{ cinder_rbd_user | default('cinder') }}.keyring)
  when: use_ceph
  tags: nova

- name: start neutron networking
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - neutron-ovs-cleanup
    - neutron-openvswitch-agent
  when: use_neutron
  tags: nova

- name: start nova-compute services
  service:
    name: openstack-nova-compute
    state: started
    enabled: yes
  tags: nova

- name: start nova network
  service:
    name: openstack-nova-network
    state: started
    enabled: yes
  when: use_nova_network
  tags: nova
