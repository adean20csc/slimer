---
# Setting up cinder using nfs until a different driver is supplied
- name: install cinder components
  yum: name={{ item }} state=present
  with_items:
  - openstack-cinder
  - openstack-utils
  - python-memcached
  - python-keystonemiddleware
  - python-openstackclient
  - nfs-utils
  tags: cinder

- name: Update cinder config file
  ini_file:
    dest: /etc/cinder/cinder.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "debug", value: "true"}
    - { section: "DEFAULT", option: "auth_startegy", value: "keystone"}
    - { section: "DEFAULT", option: "rabbit_hosts", value: "{{ rabbit_hosts }}"}
    - { section: "DEFAULT", option: "rabbit_ha_queues", value: "true"}
    - { section: "DEFAULT", option: "memcached_servers", value: "{{ memcached_servers }}"}
    - { section: "DEFAULT", option: "notification_driver", value: "messaging"}
    - { section: "DEFAULT", option: "control_exchange", value: "cinder"}
    - { section: "DEFAULT", option: "glance_host", value: "{{ glance_private_vip }}"}
    - { section: "DEFAULT", option: "host", value: "{{ cinder_host }}"}
    - { section: "DEFAULT", option: "osapi_volume_listen", value: "{{ cinder_osapi_volume_listen }}"}
    - { section: "DEFAULT", option: "osapi_volume_listen_port", value: "{{ cinder_osapi_volume_listen_port }}"}
    - { section: "keystone_authtoken", option: "identity_uri", value: "{{ keystone_auth_protocol | default('http') }}://{{ keystone_admin_vip }}:{{ keystone_auth_port | default(35357) }}/"}
    - { section: "keystone_authtoken", option: "auth_uri", value: "{{ keystone_public_protocol | default('http') }}://{{ keystone_public_vip }}:{{ keystone_public_port | default(5000) }}/"}
    - { section: "keystone_authtoken", option: "admin_tenant_name", value: "services"}
    - { section: "keystone_authtoken", option: "admin_user", value: "cinder"}
    - { section: "keystone_authtoken", option: "admin_password", value: "{{ cinder_pass }}"}
    - { section: "database", option: "connection", value: "mysql://cinder:{{ cinder_db_pass }}@{{ lb_db_vip}}/cinder"}
    - { section: "database", option: "max_retries", value: "-1"}
  tags: cinder

- name: Update configure cinder nfs driver via openstack-config utility
  ini_file:
    dest: /etc/cinder/cinder.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "nfs_shares_config", value: "/etc/cinder/nfs_exports"}
    - { section: "DEFAULT", option: "nfs_sparsed_volumes", value: "true"}
    - { section: "DEFAULT", option: "nfs_mount_options", value: "v3"}
    - { section: "DEFAULT", option: "volume_driver", value: "cinder.volume.drivers.nfs.NfsDriver"}
  tags: cinder

- name: create nfs export directory
  file: state=directory path={{nfs_path}}/cinder owner=root group=cinder mode=0640
  when: use_cinder_nfs_volume_driver
  tags: cinder

- name: create cinder nfs export file
  template: src=nfs_exports.j2 dest=/etc/cinder/nfs_exports owner=root group=cinder mode=0640
  when: use_cinder_nfs_volume_driver
  tags: cinder

- name: check for tables
  command: mysql -e "select count(*) from information_schema.tables where table_schema='cinder'" -sN
  run_once: true
  register: mysql_result
  tags: cinder

- name: run dbsync for cinder
  command: runuser cinder -s /bin/sh -c '/usr/bin/cinder-manage db sync'
  when: mysql_result.stdout|int == 0
  run_once: true
  tags: cinder

- name: enable nfs support services
  service: name={{ item }} enabled=yes state=started
  with_items:
    - rpcbind
    - nfslock
  when: use_cinder_nfs_volume_driver
  tags: cinder

- name: disable cinder services
  service: name={{ item }} enabled=no
  with_items:
    - openstack-cinder-api
    - openstack-cinder-scheduler
    - openstack-cinder-volume
  tags: cinder

- name: create pacemaker resources for cinder services
  pcs_resource: command=create name=cinder-{{ item }} type=systemd:openstack-cinder-{{ item }} clone=yes interleave=yes
  args:
    operations:
      - action: monitor
        options:
          start-delay: 10s
  run_once: true
  with_items:
    - api
    - scheduler
  tags: cinder

- name: create pacemaker resource for cinder-volume
  pcs_resource: command=create name=cinder-volume type=systemd:openstack-cinder-volume
  args:
    operations:
      - action: monitor
        options:
          start-delay: 10s
  run_once: true
  tags: cinder

- name: create pacemaker constraints for cinder
  shell: "pcs constraint list --full | grep id:{{ item.id }} || pcs constraint {{ item.cmd }}"
  with_items:
    - { id: order-keystone-clone-cinder-api-clone-mandatory, cmd: "order start keystone-clone then cinder-api-clone" }
    - { id: order-cinder-api-clone-cinder-scheduler-clone-mandatory, cmd: "order start cinder-api-clone then cinder-scheduler-clone" }
    - { id: colocation-cinder-scheduler-clone-cinder-api-clone, cmd: "colocation add cinder-scheduler-clone with cinder-api-clone" }
    - { id: order-cinder-scheduler-clone-cinder-volume-mandatory, cmd: "order start cinder-scheduler-clone then cinder-volume" }
  run_once: true
  register: cmd
  changed_when: "'{{ item.id }}' not in cmd.stdout"
  tags: cinder
